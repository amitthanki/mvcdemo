@using ENRLReconSystem.Utility
@using ENRLReconSystem.Helpers
@using ENRLReconSystem.DO
@model DOGEN_Queue
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

    ViewBag.IsRestrictedVisible = false;
}


<section class="container main-body-wrpr">
    @using (Html.BeginForm("SaveOSTCases", "OST", FormMethod.Post, new { @id = "frmCreateCases" }))
    {

        <div class="wdgt-wrapper">
            <div class="wdgt-hdr">
                <img src="~/Images/create-icon.png" /><h4>@ViewBag.caseType</h4>
            </div>
            <div class="wdgt-body clearfix">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(false)
                @Html.HiddenFor(m => m.GEN_QueueId, new { @id = "hdnGenQueueId" })
                @Html.HiddenFor(m => m.IsClosedAndCreateNew, new { @id = "hdnIsClosedAndCreateNew" })
                @Html.HiddenFor(m => m.MemberDOB)
                @Html.HiddenFor(m => m.DiscrepancyReceiptDate)
                @Html.HiddenFor(m => m.StartDate)
                @Html.HiddenFor(m => m.EndDate)

                <div class="inner-wdgt clearfix">
                    <div class="primary-hdr">
                        <h4><img src="~/Images/info-icon.png" /><span>Member Info</span></h4>
                    </div>
                    <div class="inner-wdgt-body">
                        <div class="form-group col-md-3">
                            <label for="txtMemberID">Member ID</label>
                            @Html.TextBoxFor(m => m.MemberID, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtMemberID").CustomAttributes("maxlength", "20").RegularExpression(RegexType.AlphabetsWithNumericUnderscoreHyphenAndSpaces, "Member ID").StringMaxLength(20, "Member  ID").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail" class="required">Medicare ID</label>
                            <div class=" input-group">
                                @Html.TextBoxFor(m => m.MemberCurrentHICN, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtMemberCurrentHICN").RegularExpression(RegexType.StrictAlphaNumeric, "Medicare ID").CustomAttributes("maxlength", "11").StringMaxLength(11, "Medicare ID").validationAttributes)
                                <span class="input-group-btn" title="Get Member Info from web service">
                                    <button type="button" id="btnHICNID" class="btn btn-default">
                                        <img src="~/Images/get-icon.png" />
                                    </button>
                                </span>
                            </div>
                        </div>
                        @*<div class="form-group col-md-3">
                                <label for="inputEmail" class="required">Current MBI</label>
                                @Html.TextBoxFor(m => m.MemberCurrentMBI, new CustomValidation().RegularExpression(RegexType.MBI, "Current MBI").AddCssClass("form-control").CustomAttributes("id", "txtMBI").CustomAttributes("maxlength", "11").StringMaxLength(11, "Current MBI").validationAttributes)
                            </div>*@
                        <div class="form-group col-md-3">
                            <label for="inputEmail" class="required">GPS Household ID</label>
                            <div class=" input-group">
                                @Html.TextBoxFor(m => m.GPSHouseholdID, new CustomValidation().AddCssClass("form-control allowOnlyNumeric").CustomAttributes("id", "txtGPSHouseholdID").RegularExpression(RegexType.Numeric, "GPS Household ID").CustomAttributes("maxlength", "12").StringMaxLength(12, "GPS Household ID").validationAttributes)
                                <span class="input-group-btn" title="Get Member Info from web service">
                                    <button type="button" id="btnGPSHouseholdID" class="btn btn-default">
                                        <img src="~/Images/get-icon.png" />
                                    </button>
                                </span>
                            </div>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail" class="required">First Name</label>
                            @Html.TextBoxFor(m => m.MemberFirstName, new CustomValidation().Required("First Name is required.").CustomAttributes("id", "txtMemberFirstName").AddCssClass("form-control").RegularExpression(RegexType.MemberName, "First Name").CustomAttributes("maxlength", "35").StringMaxLength(35, "First Name").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="txtMemberMiddleName">Middle Name</label>
                            @Html.TextBoxFor(m => m.MemberMiddleName, new CustomValidation().CustomAttributes("id", "txtMemberMiddleName").AddCssClass("form-control").RegularExpression(RegexType.MemberName, "Middle Name").CustomAttributes("maxlength", "35").StringMaxLength(35, "Middle Name").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="txtMemberLastName" class="required">Last Name</label>
                            @Html.TextBoxFor(m => m.MemberLastName, new CustomValidation().Required("Last Name is required.").CustomAttributes("id", "txtMemberLastName").AddCssClass("form-control").RegularExpression(RegexType.MemberName, "Last Name").CustomAttributes("maxlength", "35").StringMaxLength(35, "Last Name").validationAttributes)
                        </div>
                        <div class="form-group date-group col-md-3">
                            <label class="required">DOB</label>
                            @Html.DateTimeFor(m => m.MemberDOB, false, new CustomValidation().Required("DOB is required.").AddCssClass("form-control").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="ddlContractId" class="required">Contract Number</label>
                            @Html.DropDownListFor(m => m.MemberContractIDLkup, new SelectList(Model.lstContractid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please select Contract Number.").AddCssClass("form-control").CustomAttributes("id", "ddlContractId").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="ddlPbpId" class="required">PBP</label>
                            @Html.DropDownListFor(m => m.MemberPBPLkup, new SelectList(Model.lstPbpid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please select PBP.").AddCssClass("form-control").CustomAttributes("id", "ddlPbpId").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="ddlLob">LOB</label>
                            @Html.DropDownListFor(m => m.MemberLOBLkup, new SelectList(Model.lstLob, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please select LOB.").AddCssClass("form-control").CustomAttributes("disabled", "true").CustomAttributes("id", "ddlLob").validationAttributes)
                            @Html.HiddenFor(m => m.MemberLOBLkup, new { @id = "hdnMemberLOBLkup" })
                        </div>
                        <div class="form-group col-md-3">
                            <label for="ddlMemberVerifiedState">Verified State</label>
                            @Html.DropDownListFor(m => m.MemberVerifiedState, new SelectList(Model.lstMemberVerifiedState, "LookupValue1", "LookupValue1"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="txtMemberVerifiedCountyCode">Verified County Code</label>
                            @Html.TextBoxFor(m => m.MemberVerifiedCountyCode, new CustomValidation().CustomAttributes("maxlength", "3").AddCssClass("form-control allowOnlyNumeric").StringMaxLength(3, "Verified County Code").RegularExpression(RegexType.Numeric, "Verified County Code").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="txtMemberVerifiedCountyCode">Employer Group Number</label>
                            @Html.TextBoxFor(m => m.EmployeerGroupNumber, new CustomValidation().AddCssClass("form-control").StringMaxLength(15, "Employer Group Number").RegularExpression(RegexType.AlphabetsWithNumeric, "Employer Group Number").validationAttributes)
                        </div>
                        @*<div class="form-group col-md-3">
                                <label>PDP Auto Enrollee Indicator</label>
                                @Html.DropDownListFor(m => m.PDPAutoEnrolleeInd, new SelectList(Model.lstPDPAutoEnrolleeInd, "LookupValue1", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().CustomAttributes("disabled", "true").CustomAttributes("id", "ddlPDPAutoEnrolleeInd").AddCssClass("form-control").validationAttributes)
                                @Html.HiddenFor(m => m.PDPAutoEnrolleeInd, new { @id = "hdnPDPAutoEnrolleeInd" })
                            </div>*@
                    </div>
                </div>
                <div class="inner-wdgt clearfix">
                    <div class="primary-hdr">
                        <h4><img src="~/Images/info-icon.png" /><span>Discrepancy Info</span></h4>
                    </div>
                    <div class="inner-wdgt-body">
                        <div class="form-group col-md-3">
                            <label for="ddlDiscrepancycategary">Discrepancy Category</label>
                            @Html.DropDownListFor(m => m.DiscrepancyCategoryLkup, new SelectList(Model.lstDiscCategary, "CMN_LookupMasterChildRef", "LookupMasterChildValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select Discrepancy Categary.").AddCssClass("form-control").CustomAttributes("id", "ddlDiscrepancycategary").CustomAttributes("disabled", "true").validationAttributes)
                            @Html.HiddenFor(m => m.DiscrepancyCategoryLkup, new { id = "hdnCategoryID" })
                        </div>
                        <div class="form-group col-md-3">
                            <label for="ddlDiscrepancyType" class="required">Discrepancy Type</label>
                            @Html.DropDownListFor(m => m.DiscrepancyTypeLkup, new SelectList(Model.lstDiscType, "CMN_LookupMasterChildRef", "LookupMasterChildValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select Discrepancy Type.").AddCssClass("form-control").CustomAttributes("id", "ddlDiscrepancyType").validationAttributes)
                        </div>
                        <div class="form-group date-group col-md-3">
                            <label for="inputEmail" class="required">Discrepancy Receipt Date</label>
                            @Html.DateTimeFor(m => m.DiscrepancyReceiptDate, false, new CustomValidation().Required("Discrepancy Receipt Date is required.").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail">Compliance Start Date</label>
                            @Html.TextBoxFor(m => m.ComplianceStartDate, "{0:MM/dd/yyyy}", new { @tabindex = "-1", @readonly = "readonly", @class = "form-control" })
                        </div>
                        <div class="form-group col-md-3">
                            <label for="" class="required">Source System</label>
                            @Html.DropDownListFor(m => m.SourceSystemLkup, new SelectList(Model.lstSourceSystem, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select Source System.").AddCssClass("form-control").CustomAttributes("id", "ddlSourceSystem").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail">Discrepancy Source</label>
                            @Html.DropDownListFor(m => m.DiscrepancySourceLkup, new SelectList(Model.lstDiscSourceSystem, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select Discrepancy Source.").CustomAttributes("disabled", "true").AddCssClass("form-control").CustomAttributes("id", "ddlDiscrepancySourceSystem").validationAttributes)
                            @Html.HiddenFor(m => m.DiscrepancySourceLkup)
                        </div>
                        @if (Model.DiscrepancyCategoryLkup == DiscripancyCategory.SCC.ToInt64())
                        {
                            <div class="form-group date-group col-md-3">
                                <label for="inputEmail">Effective Start Date</label>
                                @Html.DateTimeFor(m => m.StartDate, false, null)
                            </div>
                            <div class="form-group date-group col-md-3">
                                <label for="inputEmail">Effective End Date</label>
                                @Html.DateTimeFor(m => m.EndDate, false, null)
                            </div>
                            <div class="form-group col-md-3">
                                <label class="required">SCC Code</label>
                                @Html.TextBoxFor(m => m.MemberSCCCode, new CustomValidation().CustomAttributes("maxlength", "5").AddCssClass("form-control allowOnlyNumeric").StringMaxLength(50, "SCC Code").Required("SCC Code is required.").RegularExpression(RegexType.Numeric, "SCC Code").validationAttributes)
                            </div>
                        }
                        else
                        {
                            <div class="form-group col-md-3">
                                <label>SCC Code</label>
                                @Html.TextBoxFor(m => m.MemberSCCCode, new CustomValidation().CustomAttributes("maxlength", "5").AddCssClass("form-control allowOnlyNumeric").StringMaxLength(50, "SCC Code").RegularExpression(RegexType.Numeric, "SCC Code").validationAttributes)
                            </div>
                        }
                        @if (Model.DiscrepancyCategoryLkup != DiscripancyCategory.SCC.ToInt64())
                        {
                            <div class="form-group col-md-3">
                                <label>Disenrollment Date</label>
                                @Html.TextBoxFor(m => m.DisenrollmentDate, "{0:MM/dd/yyyy}", new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtDisenrollmentDate").CustomAttributes("readonly", "raedonly").validationAttributes)
                            </div>
                        }
                        @if (Model.DiscrepancyCategoryLkup == DiscripancyCategory.TRR.ToInt64())
                        {
                            <div class="form-group col-md-3">
                                <label class="required">Transaction Reply Code</label>
                                @Html.DropDownListFor(m => m.TransactionReplyCode, new SelectList(Model.lstTransactionReplyCode, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select Transaction Reply Code.").AddCssClass("form-control").CustomAttributes("id", "ddlTransactionReplyCode").validationAttributes)
                            </div>
                        }

                    </div>
                </div>
                <div class="inner-wdgt clearfix">
                    <div class="primary-hdr">
                        <h4><img src="~/Images/info-icon.png" /><span>Add Comments</span></h4>
                    </div>
                    <div class="inner-wdgt-body">
                        <form>
                            <div class="form-group textarea col-md-12">
                                <label>Comments</label>
                                @Html.TextAreaFor(m => m.Comments, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtComments").CustomAttributes("maxlength", "4000").StringMaxLength(4000, "Comments").validationAttributes)
                            </div>
                        </form>
                    </div>
                </div>
                @if (ViewBag.IsRestrictedVisible == true)
                {
                    <div class="inner-wdgt clearfix">
                        <div class="primary-hdr">
                            <h4><img src="~/Images/info-icon.png" /><span>Restricted</span></h4>
                        </div>
                        <div class="inner-wdgt-body">
                            <div class="form-group col-md-3">
                                @Html.LabelFor(m => m.IsRestricted, "Is Restricted")
                                @Html.CheckBoxFor(m => m.IsRestricted, new { @class = "form-control", @id = "cbxIsRestricted" })
                            </div>
                        </div>
                    </div>
                }
                <div class="btn-group clearfix">
                    <button type="button" id="btnSave" title="Save" class="btn btn-primary"><img src="~/Images/save-icon.png" /><span>Save</span></button>
                    <button type="button" id="btnReset" title="Reset" class="btn btn-primary"><img src="~/Images/reset-icon.png" /><span>Reset</span></button>
                    <button type="button" id="btnCancel" title="Cancel" class="btn btn-primary"><img src="~/Images/cancle-icon.png" /><span>Cancel</span></button>
                </div>
            </div>
        </div>

    }
</section>
@*--------------------------Popup--------------------------*@

<div id="HICNPopup" class="modal fade">
    <div class="modal-dialog" id="divDialog" style="width:25%;">
        <div class="modal-content" id="divHICNPopup">

        </div>
    </div>
</div>

@*--------------------------Popup--------------------------*@

@section scripts{
    <script type="text/javascript">
    ////Variables////
        var urlSaveOSTCases = '@Url.Action("SaveOSTCases", "OST")',
            urlHome = '@Url.Action("Home", "Home")',
            urlPGetProcessWork = '@Url.Action("PGetProcessWork","OST")',
            unlockUrl = '@Url.Action("UnlockRecord", "RecordsLocked")',
            urlForLock = '@Url.Action("GetLockedRecordOrLockRecord", "RecordsLocked")',
            urlPersonSearch = '@Url.Action("PersonSearch", "Common")',
            urlHouseHoldIdSearch = '@Url.Action("HouseHoldIdSearch", "OST")',
            urlGPSHouseholD = '@Url.Action("GPSHouseholdIDSearch", "Common")',
            searchCancelURL = '@Url.Action("Search", "Common")' + "?discCat=" + '@Model.DiscrepancyCategoryLkup';
        var discCategory = '@Model.DiscrepancyCategoryLkup';
        var bussinessSegment='@Model.BusinessSegmentLkup';


    var $myForm,origForm;
    ////Events////
        $("#btnCancel").on("click", function () {
            try {
                if ($("#hdnIsClosedAndCreateNew").val() == "True") {
                    fnUnlockRecord(unlockUrl, '@Model.GEN_QueueId', enums.ScreenType.Queue, searchCancelURL);
                }
                else {
                    window.location.href = urlHome;
                }
            }
            catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occoured!");
            }

        });

        $("#btnReset").on("click", function () {
            try {
                MainLayout.fnResetValidationSummary();
                $myForm.deserialize(origForm);
            }
            catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occoured!");
            }

        });

        $(document).on("change", "#DiscrepancyReceiptDate_DPart", function () {
            try {
                if ($('#DiscrepancyReceiptDate_DPart').val() != null && $('#DiscrepancyReceiptDate_DPart').val() != "") {
                    var CurrentDate = new Date(getDateTimeInMMDDYYYY($('#DiscrepancyReceiptDate_DPart').val()));
                    if (CurrentDate != null && CurrentDate != '') {
                        $("#ComplianceStartDate").val((CurrentDate.getMonth() + 1) + '/' + CurrentDate.getDate() + '/' + CurrentDate.getFullYear());
                        $("#ComplianceStartDate").change();
                    }
                }
            } catch (e) {

            }
        });


        $("#ComplianceStartDate").on("change", function () {
            try {
                var CurrentDate = new Date(getDateTimeInMMDDYYYY($('#ComplianceStartDate').val()));

                if ($("#ddlLob").val() != "") {
                    var contText = $("#ddlContractId option:selected").text();
                    if (contText.charAt(0) == "S") {
                        CurrentDate.setMonth(CurrentDate.getMonth() + 12);
                    }
                    else {
                        CurrentDate.setMonth(CurrentDate.getMonth() + 6);
                    }
                    var newDate = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    $("#txtDisenrollmentDate").val((newDate.getMonth() + 1) + '/' + newDate.getDate() + '/' + newDate.getFullYear());
                }
            } catch (e) {

            }
        });

        $("#ddlContractId").on("change", function () {
            try {
                var contID = $("#ddlContractId").val();
                var contText = $("#ddlContractId option:selected").text();
                var CurrentDate = "";
                if ($('#ComplianceStartDate').val() != null && $('#ComplianceStartDate').val() != "") {
                    CurrentDate = new Date(getDateTimeInMMDDYYYY($('#ComplianceStartDate').val()));
                }
                $("#txtDisenrollmentDate").val("");
                $("#hdnMemberLOBLkup").val("");
                $("#ddlLob").val("");
                if (contID != "") {
                    if (contText.charAt(0) == "S") {
                        $("#ddlLob").val(enums.ContractLOB.PDP);
                        $("#ddlLob").change();
                        $("#hdnMemberLOBLkup").val(enums.ContractLOB.PDP);
                        if ('@Model.DiscrepancyCategoryLkup' != enums.DiscripancyCategory.SCC) {
                            if (CurrentDate != null && CurrentDate != '') {
                                CurrentDate.setMonth(CurrentDate.getMonth() + 12);
                                var newDate = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                                $("#txtDisenrollmentDate").val((newDate.getMonth() + 1) + '/' + newDate.getDate() + '/' + newDate.getFullYear());
                            }
                        }
                    }
                    else {
                        $("#ddlLob").val(enums.ContractLOB.MA);
                        $("#ddlLob").change();
                        $("#hdnMemberLOBLkup").val(enums.ContractLOB.MA);
                        if ('@Model.DiscrepancyCategoryLkup' != enums.DiscripancyCategory.SCC) {
                            if (CurrentDate != null && CurrentDate != '') {
                                CurrentDate.setMonth(CurrentDate.getMonth() + 6);
                                var newDate = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                                $("#txtDisenrollmentDate").val((newDate.getMonth() + 1) + '/' + newDate.getDate() + '/' + newDate.getFullYear());
                            }
                        }
                    }
                    ///Load PBP for C&S business segment
                    //if (bussinessSegment == enums.BusinessSegmentLkup.CNS) {
                    //    MainLayout.fnGetPBP(contID, '#ddlPbpId');
                    //}
                }



            } catch (e) {

            }
        });






        $(document).on("keypress", function (e) {
            try {
                if (e.which == 13 && !$(e.target).is("textarea") && $("#btnSave").length > 0) {
                    fnCreateCase();
                }

            } catch (e) {

            }
        });

        $("#btnSave").on("click", function (e) {
            try {
                fnCreateCase();
            }
            catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occurred!");
            }
        });

        $("#btnHICNID").on("click", function (e) {
            try {
                var memberCurrentHICN = $("#txtMemberCurrentHICN").val();
                if (memberCurrentHICN == "") {
                    MainLayout.fnAlertMessege("Alert!", "Please enter MedicareId.");
                    return false;
                }
                fnPopulateServiceData(memberCurrentHICN, "MBI");
            }
            catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occurred!");
            }
        });

        //GPS web Service
        $("#btnGPSHouseholdID").on("click", function (e) {
            try {
                var GPSHouseholdID = $("#txtGPSHouseholdID").val();
                if (GPSHouseholdID == "") {
                    MainLayout.fnAlertMessege("Alert!", "Please enter GPSHouseholdId.");
                    return false;
                }
                fnPopulateServiceData(GPSHouseholdID, "HHID");
            }
            catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occurred!");
            }
        });
        //
        $(document).on("click", "#btnGetHouseholdID", function (event) {
            try {
                $("#lblValidateSummaryPopup").html("");
                $("#lblValidateSummaryPopup").hide();
                var Radiobutton = $('input[name=HouseholdId]');
                var GPSHouseholdID = Radiobutton.filter(':checked').val();
                if (GPSHouseholdID != undefined) {
                    fnPopulateServiceData(GPSHouseholdID, "MHHID");
                }
                else {
                    $("#lblValidateSummaryPopup").html("Please Check atLeast one GPS HouseHold ID.");
                    $("#lblValidateSummaryPopup").show();
                }

            } catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occoured.");
            }
        });
    //Methods////
        //Get PBP based on Contract Number


        fnPopulateServiceData = function (id, flag) {
            try {
                $.ajax({
                    data: { "uID": id, "flag": flag },
                    url: urlPersonSearch,
                    type: "POST",
                    success: function (data) {
                        if (typeof data.flag === 'undefined') {
                            $('#divHICNPopup').empty().html(data);
                            $("#HICNPopup").modal('show');
                        }
                        else {
                            if (data == null || data == undefined || data.GPSData == null || data.GPSData.length < 1) {
                                MainLayout.fnResetValidationSummary();
                                $myForm.deserialize(origForm);
                                if (flag == "MBI") {
                                    MainLayout.fnAlertMessege("Alert!", "Invalid Medicare ID.");
                                }
                                else if (flag == "HHID") {
                                    MainLayout.fnAlertMessege("Alert!", "Invalid GPSHousehold ID.");
                                }
                                else if (flag == "MHHID") {
                                    $("#HICNPopup").modal('hide');
                                    MainLayout.fnAlertMessege("Alert!", "Invalid Medicare ID.");
                                }
                                return false;
                            }
                            fnBindServiceData(data, flag);
                        }
                    }
                });
            } catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occurred!");
            }
        };
        //Bind Data
        fnBindServiceData = function (data, flag) {
            try {
                if (data.flag == "Json") {
                    if (data != null && data != undefined && data.GPSData != null && data.GPSData.length > 0) {
                        var data1 = data.GPSData[0];
                        $('#txtMemberID').val((data1.MemberId != null) ? data1.MemberId : "");
                        if (data1.DOB != null && data1.DOB != "") {
                            var value = new Date(parseInt(data1.DOB.substr(6)));
                            var dobDate = new Date(value.getMonth() + 1 + "/" + value.getDate() + "/" + value.getFullYear());
                            $('#MemberDOB_DPart').val(getDateTimeInMMDDYYYY(dobDate));
                        }
                        $('#txtMemberFirstName').val(data1.FirstName);
                        $('#txtMemberLastName').val(data1.LastName);
                        $('#txtMemberMiddleName').val(data1.MiddleName);
                        if (data1.LOB != null) {
                            $("#ddlLob").val($("#ddlLob option:contains(" + data1.LOB.trim() + ")").val());
                        }
                        $('#MemberVerifiedState').val((data1.State != null) ? data1.State : "");
                        if (flag == "MBI" || flag == "MHHID") {
                            $('#txtGPSHouseholdID').val((data1.HouseholdId != null) ? data1.HouseholdId : "");
                        }
                        else if (flag == "HHID") {
                            $('#txtMemberCurrentHICN').val((data1.HICN != null) ? data1.HICN : "");
                        }

                        if (data1.ContractNumber != null) {
                            if ($("#ddlContractId option:contains(" + data1.ContractNumber.trim() + ")").length>0) {
                                $("#ddlContractId").val($("#ddlContractId option:contains(" + data1.ContractNumber.trim() + ")").val());
                            }
                        }
                        //$("#ddlContractId").change();
                        if (data1.PBP != null) {
                            if ($("#ddlPbpId option:contains(" + data1.PBP.trim() + ")").length>0)
                            {
                                $("#ddlPbpId").val($("#ddlPbpId option:contains(" + data1.PBP.trim() + ")").val());
                            }
                        }

                        if ($("#HICNPopup").length > 0)
                            $("#HICNPopup").modal('hide');

                    }
                }


            } catch (e) {
                throw e;
            }
        };

        fnCreateCase = function () {
            try {
                fnGetDateIntoHdnFields();
                var $form = $("#frmCreateCases"),
                    urlForm = $form.attr('action'),
                    frmData = $form.serialize();

                if (fnValidateCreateCase($form)) {
                    $.ajax({
                        data: frmData,
                        url: urlSaveOSTCases,
                        type: "POST",
                        success: function (data) {
                            if (data.ID > 0) {
                                if (data.Message != "") {
                                    MainLayout.fnAlertMessege("Alert!", data.Message);
                                }
                                else {
                                    MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                                }
                            }
                            else if (data.ID == 0) {
                                if (data.issamebusinesssegment==0) {
                                    MainLayout.fnConfirmDialogbox("Confirm!", data.Message, function (isTrue) {
                                        if (isTrue) {
                                            if (data.Gen_QueueId != 'unDefined' && data.Gen_QueueId > 0) {
                                                fnRedirectToProcess(data.Gen_QueueId, data.businessSegmentLkup);
                                            }
                                            else {
                                                MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                                            }
                                        }
                                        else {
                                            window.location.reload(true);
                                        }
                                    });
                                }
                               // if Business Segment is  not  same then display Alert Message
                                else {
                                    MainLayout.fnAlertMessege("Alert!", data.Message, function () {
                                        if (data.Gen_QueueId != 'unDefined' && data.Gen_QueueId > 0) {
                                            window.location.reload(true);
                                        }
                                        else {
                                            MainLayout.fnAlertMessege("Error!", "An error occoured.");
                                        }
                                    });
                                }
                            }
                            else {
                                MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                            }
                        },
                        error: function (x) {
                            MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                        }
                    });
                }

            } catch (e) {
                throw e;
            }
        };
        //Redirect to ProcessWork screen
        fnRedirectToProcess = function (genQueueId) {
            try {
                var urlToNavigate = '';
                //After clone a case and redirect to Search page
                if ($("#hdnIsClosedAndCreateNew").val() == "True") {
                    window.location.href = searchCancelURL;
                }
                else {
                    var discrepancyCategoryLkup = parseInt($("#hdnCategoryID").val());
                    if (discrepancyCategoryLkup == enums.DiscripancyCategory.OOA)
                        urlToNavigate = '@Url.Action("OOAProcessWork", "OST")' + '?queueId=' + btoa(genQueueId) + "&PageName=" + "OSTCreateCases";
                    else if (discrepancyCategoryLkup == enums.DiscripancyCategory.SCC)
                        urlToNavigate = '@Url.Action("SCCProcessWork", "OST")' + '?queueId=' + btoa(genQueueId) + "&PageName=" + "OSTCreateCases";
                    else if (discrepancyCategoryLkup == enums.DiscripancyCategory.TRR)
                        urlToNavigate = '@Url.Action("TRRProcessWork", "OST")' + '?queueId=' + btoa(genQueueId) + "&PageName=" + "OSTCreateCases";

                    //Lock the record and navigate to process work
                    if (urlToNavigate != '') {
                        fnLockRecord(urlForLock, genQueueId, enums.ScreenType.Queue, urlToNavigate);
                    }
                    else {
                        MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                    }
                }
            } catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occoured.");

            }
        };
        fnValidateCreateCase = function ($form) {
            try {
                var errorList = []
                    , $summary = $form.find("[data-valmsg-summary=true]")
                    , $ul = $summary.find("ul").empty();

                var isFormValid = $form.valid(), isValid = true;


                var effectiveStartDate = new Date($('#StartDate_DPart').val());
                var effectiveEndDate = new Date($('#EndDate_DPart').val());
                var discReceiptDatee = new Date($('#DiscrepancyReceiptDate_DPart').val());
                var compStartDate = new Date($('#ComplianceStartDate').val());
                var MemberDOB = new Date($('#MemberDOB_DPart').val());
                var today = new Date();
                today.setHours(0, 0, 0, 0)

                if ($("#txtGPSHouseholdID").val() == "") {
                    $('#txtGPSHouseholdID').removeClass("valid").addClass("input-validation-error");
                    $("<li />").html("GPS Household ID is required.").prependTo($ul);
                    isValid = false;
                }
                if ($("#txtMemberCurrentHICN").val() == "") {
                    $('#txtMemberCurrentHICN').removeClass("valid").addClass("input-validation-error");
                    $("<li />").html("Medicare ID is required.").prependTo($ul);
                    isValid = false;
                }
                if (MemberDOB >= today) {
                    $('#MemberDOB_DPart').removeClass("valid").addClass("input-validation-error");
                    $("<li />").html("DOB  must be less than  Current Date.").prependTo($ul);
                    isValid = false;
                }
                if (!isFormValid) {
                    return false;
                }

                if (discReceiptDatee > today) {
                    errorList.push("Discrepancy Receipt Date should be less than or equal to current date.");
                }
                if (compStartDate > today) {
                    errorList.push("Compliance Start Date should be less than or equal to current date.");
                }
                if (effectiveStartDate < today) {
                    errorList.push("Effective Start Date Must be less than or equal to Current Date.");
                }
                if (effectiveStartDate > effectiveEndDate) {
                    errorList.push("Effective Start Date Must be less than or equal to Effective END Date.");
                }
                ////
                if (errorList.length == 0 && isValid) {
                    return true;
                }

                // Add all errors to the list
                $.each(errorList, function (index, message) {
                    $("<li />").html(message).appendTo($ul);
                });
                // Add the appropriate class to the summary div
                $summary.removeClass("validation-summary-valid").addClass("validation-summary-errors");


                return false; // Block the submit


            } catch (e) {

            }
        };
    //function to set model date time values from date time picker
        fnGetDateIntoHdnFields = function () {
            var date = $('#MemberDOB_DPart').val();
            if (date != null && date != '') {
                $('#MemberDOB').val(getDateTimeInMMDDYYYY(date));
            }
            var date = $('#DiscrepancyReceiptDate_DPart').val();
            if (date != null && date != '') {
                $('#DiscrepancyReceiptDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#StartDate_DPart').val();
            if (date != null && date != '') {
                $('#StartDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EndDate_DPart').val();
            if (date != null && date != '') {
                $('#EndDate').val(getDateTimeInMMDDYYYY(date));
            }
        };

        //Initial load
        $(function () {
            $('#frmCreateCases').get(0).reset();
            $('#txtMemberID').focus();
            if ($("#hdnGenQueueId").val() > 0) {
                if ('@Model.MemberDOB' != null && '@Model.MemberDOB' != '') {
                    $('#MemberDOB_DPart').val(getDateTimeInMMDDYYYY('@Model.MemberDOB'));
                    //fnSetDateToField('','MemberDOB');
                }
                if ('@Model.DiscrepancyReceiptDate' != null && '@Model.DiscrepancyReceiptDate' != '') {
                    $('#DiscrepancyReceiptDate_DPart').val(getDateTimeInMMDDYYYY('@Model.DiscrepancyReceiptDate'));
                    // fnSetDateToField('','DiscrepancyReceiptDate');
                }
                if ('@Model.StartDate' != null && '@Model.StartDate' != '') {
                    $('#StartDate_DPart').val(getDateTimeInMMDDYYYY('@Model.StartDate'));
                    // fnSetDateToField('','StartDate');
                }
                if ('@Model.EndDate' != null && '@Model.EndDate' != '') {
                    $('#EndDate_DPart').val(getDateTimeInMMDDYYYY('@Model.EndDate'));
                    //fnSetDateToField('','EndDate');
                }
                $("#ddlContractId").change();
                if ('@Model.MemberPBP' != "") {
                    if ($("#ddlPbpId option:contains(" + '@Model.MemberPBP' + ")").length > 0) {
                        $("#ddlPbpId").val($("#ddlPbpId option:contains(" + '@Model.MemberPBP' + ")").val());
                    }
                }
                $("#ComplianceStartDate").change();
            }
            $myForm = $("#frmCreateCases");
            origForm = $myForm.serialize();
        });

    </script>
}

