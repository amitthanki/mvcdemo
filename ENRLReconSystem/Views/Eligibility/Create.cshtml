@using ENRLReconSystem.Utility
@using ENRLReconSystem.Helpers
@model ENRLReconSystem.DO.DOGEN_Queue
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.IsRestrictedVisible = false;
}




<section class="container main-body-wrpr">
    <form id="frmCreate" method="post">
        @Html.HiddenFor(m => m.GEN_QueueId, new { @id = "hdnGEN_QueueId" })
        @Html.HiddenFor(m => m.IsClosedAndCreateNew, new { @id = "hdnIsClosedAndCreateNew" })
        @Html.HiddenFor(m => m.ComplianceStartDate)
        @Html.HiddenFor(m => m.DiscrepancyReceiptDate)
        @Html.HiddenFor(m => m.EligGPSInsuredPlanEffectiveDate)
        @Html.HiddenFor(m => m.EligGPSInsuredPlanTermDate)
        @Html.HiddenFor(m => m.EligMMRPaymentAdjustmentStartDate)
        @Html.HiddenFor(m => m.EligMMRPaymentAdjustmentEndDate)
        @Html.HiddenFor(m => m.MemberDOB)
        @Html.HiddenFor(m => m.EligMMRPaymentMonth)
        @Html.HiddenFor(m => m.DiscrepancyCategoryLkup, new { @id = "hdnDiscrepancyCategoryLkup" })
        @Html.HiddenFor(m => m.EligGPSMemberDOB)
        @Html.HiddenFor(m => m.EligMMRDOB)
        <div class="wdgt-wrapper">
            <div class="wdgt-hdr">
                <img src="~/Images/create-icon.png" /><h4>@ViewBag.CaseType</h4>
            </div>
            <div class="wdgt-body clearfix">
                <div class="inner-wdgt clearfix">
                    @Html.ValidationSummary()
                    @*Member Info Section*@
                    <div class="primary-hdr">
                        <h4><img src="~/Images/info-icon.png" /><span>Member Info</span></h4>
                    </div>
                    <div class="inner-wdgt-body">
                        <div class="form-group col-md-3">
                            <label for="inputEmail">Member ID</label>
                            @*<div class="input-group">*@
                                @Html.TextBoxFor(m => m.MemberID, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtMemberID").RegularExpression(RegexType.AlphabetsWithNumericUnderscoreHyphenAndSpaces, "Member ID").CustomAttributes("maxlength", "20").StringMaxLength(20, "Member  ID").validationAttributes)
                                @*<span class="input-group-btn" title="Get Member Info from web service">
                                    <button type="button" class="btn btn-default">
                                        <img src="~/Images/get-icon.png" />
                                    </button>
                                </span>
                            </div>*@
                        </div>
                        <div class="form-group col-md-3">
                            <label class="required" for="inputEmail">Medicare ID</label>
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.MemberCurrentHICN, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtMemberCurrentHICN").RegularExpression(RegexType.StrictAlphaNumeric, "Medicare ID").CustomAttributes("maxlength", "11").StringMaxLength(11, "Medicare ID").validationAttributes)
                                <span class="input-group-btn" title="Get Member Info from web service">
                                    <button type="button" id="btnHICNID" class="btn btn-default">
                                        <img src="~/Images/get-icon.png" />
                                    </button>
                                </span>
                            </div>
                        </div>
                        @*<div class="form-group col-md-3">
                            <label for="inputEmail">MBI</label>
                            @Html.TextBoxFor(m => m.MemberCurrentMBI, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtMbi").RegularExpression(RegexType.MBI, "MBI").StringMaxLength(11, "MBI").validationAttributes)
                        </div>*@
                        <div class="form-group col-md-3">
                            <label class="required" for="inputEmail">GPS Household ID</label>
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.GPSHouseholdID, new CustomValidation().Required("GPS Household ID is Required").AddCssClass("form-control").CustomAttributes("id", "txtGPSHouseholdID").RegularExpression(RegexType.Numeric, "GPS Household ID").CustomAttributes("maxlength", "13").StringMaxLength(13, "GPS Household ID").validationAttributes)
                                <span class="input-group-btn" title="Get Member Info from web service">
                                    <button type="button" id="btnGPSHouseholdID" class="btn btn-default">
                                        <img src="~/Images/get-icon.png" />
                                    </button>
                                </span>
                            </div>
                        </div>
                        <div class="form-group col-md-3">
                            <label class="required" for="inputEmail">First Name</label>
                            @Html.TextBoxFor(m => m.MemberFirstName, new CustomValidation().Required("First Name is Required").AddCssClass("form-control").CustomAttributes("id", "txtMemberFirstName").RegularExpression(RegexType.MemberName, "First Name").CustomAttributes("maxlength", "35").StringMaxLength(35, "First Name").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail">Middle Name</label>
                            @Html.TextBoxFor(m => m.MemberMiddleName, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtMemberMiddleName").RegularExpression(RegexType.MemberName, "Middle Name").CustomAttributes("maxlength", "35").StringMaxLength(35, "Middle Name").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label class="required" for="inputEmail">Last Name</label>
                            @Html.TextBoxFor(m => m.MemberLastName, new CustomValidation().Required("Last Name is Required").AddCssClass("form-control").CustomAttributes("id", "txtMemberLastName").RegularExpression(RegexType.MemberName, "Last Name").CustomAttributes("maxlength", "35").StringMaxLength(35, "Last Name").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label class="required" for="inputEmail">Contract Number</label>
                            @Html.DropDownListFor(m => m.MemberContractIDLkup, new SelectList(Model.lstContractid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select Contract Number").AddCssClass("form-control").CustomAttributes("id", "ddlContractNumber").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label class="required" for="inputEmail">PBP</label>
                            @Html.DropDownListFor(m => m.MemberPBPLkup, new SelectList(Model.lstPbpid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select PBP").AddCssClass("form-control").CustomAttributes("id", "ddlPBP").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail">LOB</label>
                            @Html.DropDownListFor(m => m.MemberLOBLkup, new SelectList(Model.lstLob, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select LOB").AddCssClass("form-control").CustomAttributes("disabled", "true").CustomAttributes("id", "ddlLOB").validationAttributes)
                            @Html.HiddenFor(m => m.MemberLOBLkup, new { @id = "hdnMemberLOBLkup" })
                        </div>
                        <div class="form-group date-group col-md-3">
                            <label for="inputEmail">DOB<span id="spanDOB" style="color:red;">*</span></label>
                            @Html.DateTimeFor(m => m.MemberDOB, false, new CustomValidation().AddCssClass("form-control").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail">Gender<span id="spanGender" style="color:red;">*</span></label>
                            @Html.DropDownListFor(m => m.MemberGenderLkup, new SelectList(Model.lstGender, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlGender").validationAttributes)
                        </div>
                        <div class="form-group col-md-3">
                            <label for="inputEmail">OOA Flag</label>
                            @Html.DropDownListFor(m => m.OOAFlagLkupValue, new SelectList(Model.lstOOAFlag, "LookupValue1", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").validationAttributes)
                        </div>
                    </div>
                </div>
                <div class="wdgt-wrapper">
                    <div class="wdgt-hdr">
                        <img src="~/Images/list-icon.png" /><h4>Discrepancy Data</h4>
                    </div>
                    <div class="wdgt-body clearfix">
                        <div class="clearfix">
                            <div class="form-group col-md-3">
                                <label for="inputEmail">Discrepancy Category</label>
                                @Html.DropDownListFor(m => m.DiscrepancyCategoryLkup, new SelectList(Model.lstDiscCategary, "CMN_LookupMasterChildRef", "LookupMasterChildValue"), "<---Select--->", new CustomValidation().Required("Please Select Discrepancy Category").AddCssClass("form-control").CustomAttributes("disabled", "disabled").validationAttributes)
                            </div>
                            <div class="form-group col-md-3">
                                <label class="required" for="inputEmail">Discrepancy Type</label>
                                @Html.DropDownListFor(m => m.DiscrepancyTypeLkup, new SelectList(Model.lstDiscType, "CMN_LookupMasterChildRef", "LookupMasterChildValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select Discrepancy Type").AddCssClass("form-control").CustomAttributes("id", "ddlDisType").validationAttributes)
                            </div>
                            <div class="form-group date-group col-md-3">
                                <label class="required" for="inputEmail">Compliance Start Date</label>
                                @Html.DateTimeFor(m => m.ComplianceStartDate, false, new CustomValidation().Required("Compliance Start Date is Required").AddCssClass("form-control").validationAttributes)
                            </div>
                            <div class="form-group date-group col-md-3">
                                <label class="required" for="inputEmail">Discrepancy  Receipt Date</label>
                                @Html.DateTimeFor(m => m.DiscrepancyReceiptDate, false, new CustomValidation().Required("Discrepancy Receipt Date is Required").AddCssClass("form-control").validationAttributes)
                            </div>
                            <div class="form-group col-md-3">
                                <label for="inputEmail">Discrepancy Start Date</label>
                                @Html.TextBoxFor(m => m.DiscrepancyStartDate, "{0:MM/dd/yyyy}", new { @tabindex = "-1",@readonly = "readonly", @class = "form-control" })
                               
                            </div>
                            <div class="form-group col-md-3">
                                <label for="inputEmail">Discrepancy End Date</label>
                                @Html.TextBoxFor(m => m.DiscrepancyEndDate, "{0:MM/dd/yyyy}", new { @tabindex = "-1",@readonly = "readonly", @class = "form-control" })
                            </div>
                            @*<div class="form-group date-group col-md-3">
                                <label class="required" for="inputEmail">Discrepancy Start Date</label>
                                @Html.DateTimeFor(m => m.DiscrepancyStartDate, false, new CustomValidation().Required("Discrepancy Start Date is Required").AddCssClass("form-control").validationAttributes)
                            </div>
                            <div class="form-group date-group col-md-3">
                                <label class="required" for="inputEmail">Discrepancy End Date</label>
                                @Html.DateTimeFor(m => m.DiscrepancyEndDate, false, new CustomValidation().Required("Discrepancy End Date is Required").AddCssClass("form-control").validationAttributes)
                            </div>*@
                        </div>
                        <div class="gps-mmr-wdgt-ctr clearfix">
                            <div class="inner-wdgt clearfix">
                                <div class="primary-hdr">
                                    <h4>GPS</span></h4>
                                </div>
                                <div class="inner-wdgt-body">
                                    @if (Model.DiscrepancyCategoryLkup == DiscripancyCategory.Eligibility.ToInt64()) // Eligibility
                                    {
                                        @*<div class="form-group col-md-3">
                                            <label for="inputEmail">GPS MBI</label>
                                            @Html.TextBoxFor(m => m.EligGPSCurrentMBI, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtELigGPSMbi").RegularExpression(RegexType.MBI, "GPS MBI").StringMaxLength(11, "GPS MBI").validationAttributes)
                                        </div>*@
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">Contract Number<span id="spanGPSCon"></span></label>
                                            @Html.DropDownListFor(m => m.EligGPSContractIDLkup, new SelectList(Model.lstContractid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlEligGPSContractIDLkup").validationAttributes)
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">PBP<span id="spanGPSPBP"></span></label>
                                            @Html.DropDownListFor(m => m.EligGPSPBPLkup, new SelectList(Model.lstPbpid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlEligGPSPBPLkup").validationAttributes)
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">SCC Code</label>
                                            @Html.TextBoxFor(m => m.EligGPSSCCCode, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtEligGPSSCCCode").RegularExpression(RegexType.Numeric, "GPS SCC Code").CustomAttributes("maxlength", "5").StringMaxLength(5, "GPS SCC Code").validationAttributes)
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">Medicare ID<span id="spanGPSHICN"></span></label>
                                            @Html.TextBoxFor(m => m.EligGPSCurrentHICN, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtEligGPSCurrentHICN").RegularExpression(RegexType.StrictAlphaNumeric, "GPS Medicare ID").CustomAttributes("maxlength", "11").StringMaxLength(11, "GPS Medicare ID").validationAttributes)
                                        </div>
                                        <div class="form-group date-group col-md-3">
                                            <label for="inputEmail">Insured Plan Effective Date</label>
                                            @Html.DateTimeFor(m => m.EligGPSInsuredPlanEffectiveDate, false, new CustomValidation().validationAttributes)
                                        </div>
                                        <div class="form-group date-group col-md-3">
                                            <label for="inputEmail">Insured Plan Term Date</label>
                                            @Html.DateTimeFor(m => m.EligGPSInsuredPlanTermDate, false, new CustomValidation().validationAttributes)
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">Line of Business Description</label>
                                            @Html.DropDownListFor(m => m.EligGPSLOBLkup, new SelectList(Model.lstLob, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlDisType").validationAttributes)
                                        </div>
                                    }
                                    else if (Model.DiscrepancyCategoryLkup == DiscripancyCategory.DOB.ToInt64())  // DOB
                                    {
                                        <div class="form-group date-group col-md-3">
                                            <label for="inputEmail">DOB</label>
                                            @Html.DateTimeFor(m => m.EligGPSMemberDOB, false, new CustomValidation().validationAttributes)
                                        </div>
                                    }
                                    else // Gender
                                    {
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">Gender</label>
                                            @Html.DropDownListFor(m => m.EligGPSGenderLkup, new SelectList(Model.lstGender, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlGender").validationAttributes)
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="inner-wdgt clearfix">
                                <div class="primary-hdr">
                                    <h4>MMR</span></h4>
                                </div>
                                <div class="inner-wdgt-body">
                                    @if (Model.DiscrepancyCategoryLkup == DiscripancyCategory.Eligibility.ToInt64()) // Eligibility
                                    {
                                        @*<div class="form-group col-md-3">
                                            <label for="inputEmail">MMR MBI</label>
                                            @Html.TextBoxFor(m => m.EligMMRCurrentMBI, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtEligMMRMbi").RegularExpression(RegexType.MBI, "MMR MBI").StringMaxLength(11, "MBI").validationAttributes)
                                        </div>*@
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">Contract Number<span id="spanMMRCon"></span></label>
                                            @Html.DropDownListFor(m => m.EligMMRContractIDLkup, new SelectList(Model.lstContractid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlEligMMRContractIDLkup").validationAttributes)
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">PBP<span id="spanMMRPBP"></span></label>
                                            @Html.DropDownListFor(m => m.EligMMRPBPLkup, new SelectList(Model.lstPbpid, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlEligMMRPBPLkup").validationAttributes)
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">SCC Code</label>
                                            @Html.TextBoxFor(m => m.EligMMRSCCCode, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtEligMMRSCCCode").RegularExpression(RegexType.Numeric, "MMR SCC Code").CustomAttributes("maxlength", "5").StringMaxLength(5, "MMR SCC Code").validationAttributes)
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">Medicare ID<span id="spanMMRHICN"></span></label>
                                            @Html.TextBoxFor(m => m.EligMMRCurrentHICN, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtEligMMRCurrentHICN").RegularExpression(RegexType.StrictAlphaNumeric, "MMR Medicare ID").CustomAttributes("maxlength", "11").StringMaxLength(11, "MMR Medicare ID").validationAttributes)
                                        </div>
                                        <div class="form-group date-group col-md-3">
                                            <label for="inputEmail">Payment Adjustment Start Date</label>
                                            @Html.DateTimeFor(m => m.EligMMRPaymentAdjustmentStartDate, false, new CustomValidation().validationAttributes)
                                        </div>
                                        <div class="form-group date-group col-md-3">
                                            <label for="inputEmail">Payment Adjustment End Date</label>
                                            @Html.DateTimeFor(m => m.EligMMRPaymentAdjustmentEndDate, false, new CustomValidation().validationAttributes)
                                        </div>
                                        <div class="form-group date-group col-md-3">
                                            <label for="inputEmail">Payment Month</label>
                                            @Html.DateTimeFor(m => m.EligMMRPaymentMonth, false, new CustomValidation().validationAttributes)
                                        </div>
                                    }
                                    else if (Model.DiscrepancyCategoryLkup == DiscripancyCategory.DOB.ToInt64())  // DOB
                                    {
                                        <div class="form-group date-group col-md-3">
                                            <label for="inputEmail">DOB</label>
                                            @Html.DateTimeFor(m => m.EligMMRDOB, false, new CustomValidation().validationAttributes)
                                        </div>
                                    }
                                    else // Gender
                                    {
                                        <div class="form-group col-md-3">
                                            <label for="inputEmail">Gender</label>
                                            @Html.DropDownListFor(m => m.EligMMRGenderLkup, new SelectList(Model.lstGender, "CMN_LookupMasterId", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "ddlGender").validationAttributes)
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                @*<div class="clearfix" style="margin-bottom: 10px;">
                        <div class="col-md-4 col-md-offset-4 clearfix">
                            <label class="required">OOA Flag</label>
                            @Html.DropDownListFor(m => m.OOAFlagLkupValue, new SelectList(Model.lstOOAFlag, "LookupValue1", "LookupValue"), ConstantTexts.dropdownDefaultValue, new CustomValidation().Required("Please Select OOA Flag").AddCssClass("form-control").validationAttributes)
                        </div>
                    </div>*@
                <div class="inner-wdgt clearfix">
                    <div class="primary-hdr">
                        <h4><img src="~/Images/info-icon.png" /><span>Add Comments</span></h4>
                    </div>
                    <div class="inner-wdgt-body">
                        <div class="form-group textarea col-md-12">
                            <label>Comments</label>
                            @Html.TextAreaFor(m => m.Comments, new CustomValidation().AddCssClass("form-control").CustomAttributes("id", "txtComments").CustomAttributes("maxlength", "4000").StringMaxLength(4000, "Comments").validationAttributes)
                        </div>
                    </div>
                </div>
                @*Is Restricted Section*@
                @if (ViewBag.IsRestrictedVisible == true)
                {
                    <div class="inner-wdgt clearfix">
                        <div class="primary-hdr">
                            <h4><img src="~/Images/info-icon.png" /><span>Restricted</span></h4>
                        </div>
                        <div class="inner-wdgt-body">
                            <div class="form-group col-md-3">
                                @Html.LabelFor(m => m.IsRestricted, "Is Restricted")
                                @Html.CheckBoxFor(m => m.IsRestricted, new { @class = "form-control", @id = "cbxIsRestricted" })
                            </div>
                        </div>
                    </div>
                }
                @*Attachments Section*@
                @*<div class="inner-wdgt clearfix">
                        <div class="primary-hdr">
                            <h4><img src='@Url.Content("/images/info-icon.png")' /><span>Attachment</span></h4>
                        </div>
                        <div class="inner-wdgt-body">
                            <div class="col-md-8">
                                <label class="text-info">
                                    Please Upload an Attachment (if any) with the Created Eligibility Suspect Case. Submitting on this screen will route this case to Initial Eligibility WB post which the Eligibility Requestor will not be able to attach any document.
                                </label>
                            </div>
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.Attachment, "Attachment:")
                            <label class="btn btn-default">
                                @Html.TextBoxFor(m => m.Attachment, new { @type = "file", @id = "atchAttchment" })
                            </label>
                        </div>
                    </div>*@
                @*</div>*@
            </div>
        </div>
        <div class="btn-group clearfix">
            <button type="button" id="btnsubmit" title="Save" class="btn btn-primary"><img src="~/Images/save-icon.png" /><span>Save</span></button>
            <button type="button" id="btnReset" title="Reset" class="btn btn-primary"><img src="~/Images/reset-icon.png" /><span>Reset</span></button>
            <button type="button" id="btnCancel" title="Cancel" class="btn btn-primary"><img src="~/Images/cancle-icon.png" /><span>Cancel</span></button>


        </div>
    </form>
</section>

@*--------------------------Popup--------------------------*@

<div id="HICNPopup" class="modal fade">
    <div class="modal-dialog" id="divDialog" style="width:25%;">
        <div class="modal-content" id="divHICNPopup">

        </div>
    </div>
</div>

@*--------------------------Popup--------------------------*@

@section scripts{

    <script>
        //$(window).load(function () {
        //    $('#frmCreate').get(0).reset(); //clear form data on page load
        //});
        var $myForm, origForm,
            unlockUrl = '@Url.Action("UnlockRecord", "RecordsLocked")',
            urlForLock = '@Url.Action("GetLockedRecordOrLockRecord", "RecordsLocked")',
            urlPersonSearch = '@Url.Action("PersonSearch", "Common")';
        var urlHouseHoldIdSearch = '@Url.Action("HouseHoldIdSearch", "Eligibility")';
        var urlGPSHouseholD = '@Url.Action("GPSHouseholdIDSearch", "Common")';
        var searchCancelURL = '@Url.Action("Search", "Common")' + "?discCat=" + '@Model.DiscrepancyCategoryLkup';
        var bussinessSegment='@Model.BusinessSegmentLkup';

        //function to set model date time values from date time picker
        fnGetDateIntoHdnFields = function () {
            var date = $('#DiscrepancyReceiptDate_DPart').val();
            if (date != null && date != '') {
                $('#DiscrepancyReceiptDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#ComplianceStartDate_DPart').val();
            if (date != null && date != '') {
                $('#ComplianceStartDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EligGPSInsuredPlanEffectiveDate_DPart').val();
            if (date != null && date != '') {
                $('#EligGPSInsuredPlanEffectiveDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EligGPSInsuredPlanTermDate_DPart').val();
            if (date != null && date != '') {
                $('#EligGPSInsuredPlanTermDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EligMMRPaymentAdjustmentStartDate_DPart').val();
            if (date != null && date != '') {
                $('#EligMMRPaymentAdjustmentStartDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EligMMRPaymentAdjustmentEndDate_DPart').val();
            if (date != null && date != '') {
                $('#EligMMRPaymentAdjustmentEndDate').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#MemberDOB_DPart').val();
            if (date != null && date != '') {
                $('#MemberDOB').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EligMMRPaymentMonth_DPart').val();
            if (date != null && date != '') {
                $('#EligMMRPaymentMonth').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EligGPSMemberDOB_DPart').val();
            if (date != null && date != '') {
                $('#EligGPSMemberDOB').val(getDateTimeInMMDDYYYY(date));
            }
            date = $('#EligMMRDOB_DPart').val();
            if (date != null && date != '') {
                $('#EligMMRDOB').val(getDateTimeInMMDDYYYY(date));
            }
        };

        $('#ComplianceStartDate_DPart').change(function () {
            var ComplianceStartDate = new Date($('#ComplianceStartDate_DPart').val());
            $('#DiscrepancyStartDate').val('');
            $('#DiscrepancyEndDate').val('');
            if (ComplianceStartDate != "Invalid Date") {
                ComplianceStartDate.setDate(1);
                ComplianceStartDate.setMonth(ComplianceStartDate.getMonth() + 1);
                var lastDay = new Date(ComplianceStartDate.getFullYear(), ComplianceStartDate.getMonth() + 1, 0);
                $('#DiscrepancyStartDate').val(getDateTimeInMMDDYYYY(ComplianceStartDate));
                $('#DiscrepancyEndDate').val(getDateTimeInMMDDYYYY(lastDay));
            }

    })

         //// Discrepancy Start Date Changed Event.
         $('#DiscrepancyStartDate').change(function () {
             var date = new Date($('#DiscrepancyStartDate').val());
            var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
            $('#DiscrepancyEndDate').val(getDateTimeInMMDDYYYY(lastDay));
        })

        // Save Button Click Event
        $('#btnsubmit').on("click", function (e) {
            var submitUrl = '@Url.Action("Create", "Eligibility")';
            fnGetDateIntoHdnFields();
            e.preventDefault();
            var $form = $('#frmCreate'),
                      urlForm = $form.attr('action'),
                      frmData = $form.serialize();
                  var form = $('#frmCreate').valid();
          var datesValid = isDatesValid();
            if (form){
                $('.validation-summary-errors ul').empty();
            }
            else{
                return false;
            }
             var datesValid = isDatesValid();
            if (!datesValid) {
                return false;
            }
            else
            {
                $('.validation-summary-errors ul').empty();
            }
          //  if (origForm != frmData) {
                $.ajax({
                    type: "POST",
                    url: submitUrl,
                    data: frmData,
                    success: function (data) {
                        if (data.ID == 77) {
                            MainLayout.fnAlertMessege("Alert!", data.Message);
                            return;
                        }
                        if (data.ID > 0) {
                            MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                        }
                        else {
                            if (data.issamebusinesssegment == 0) {
                                MainLayout.fnConfirmDialogbox("Confirm!", data.Message, function (isTrue) {
                                    if (isTrue) {
                                        if (data.Gen_QueueId != 'unDefined' && data.Gen_QueueId > 0) {
                                            fnRedirectToProcess(data.Gen_QueueId);
                                        }
                                        else {
                                            MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                                        }
                                    }
                                    else {
                                        window.location.reload(true);
                                    }
                                });
                            }
                            else {
                                MainLayout.fnAlertMessege("Alert!", data.Message, function () {
                                    if (data.Gen_QueueId != 'unDefined' && data.Gen_QueueId > 0) {
                                        window.location.reload(true);
                                    }
                                    else {
                                        MainLayout.fnAlertMessege("Error!", "An error occoured.");
                                    }
                                });
                            }
                        }
                    },
                    error: function (data) {
                        MainLayout.fnAlertMessege("Error!", data.Message);
                        return;
                    }
                });
            //}
          //else
          //      MainLayout.fnAlertMessege("Alert","No Changes done!");
        });

        //GPS web Service
        $("#btnHICNID").on("click", function (e) {
            try {
                var memberCurrentHICN = $("#txtMemberCurrentHICN").val();
                if (memberCurrentHICN == "") {
                    MainLayout.fnAlertMessege("Alert!", "Please enter MedicareId.");
                    return false;
                }
                fnPopulateServiceData(memberCurrentHICN, "MBI");
            }
            catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occurred!");
            }
        });

        //GPS web Service
        $("#btnGPSHouseholdID").on("click", function (e) {
            try {
                var GPSHouseholdID = $("#txtGPSHouseholdID").val();
                if (GPSHouseholdID == "") {
                    MainLayout.fnAlertMessege("Alert!", "Please enter GPSHouseholdId.");
                    return false;
                }
                fnPopulateServiceData(GPSHouseholdID, "HHID");
            }
            catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occurred!");
            }
        });

        $(document).on("click", "#btnGetHouseholdID", function (event) {
            try {
                $("#lblValidateSummaryPopup").html("");
                $("#lblValidateSummaryPopup").hide();
                var Radiobutton = $('input[name=HouseholdId]');
                var GPSHouseholdID = Radiobutton.filter(':checked').val();
                if (GPSHouseholdID != undefined) {
                    fnPopulateServiceData(GPSHouseholdID, "MHHID");
                }
                else {
                    $("#lblValidateSummaryPopup").html("Please Check atLeast one GPS HouseHold ID.");
                    $("#lblValidateSummaryPopup").show();
                }

            } catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occoured.");
            }
        });

        //Methods////
        fnRedirectToProcess = function (genQueueId) {
            var urlToNavigate = '';
            try {
                if ($("#hdnIsClosedAndCreateNew").val() == "True") {
                    window.location.href = searchCancelURL;
                }
                else {
                    var discrepancyCategoryLkup = $("#hdnDiscrepancyCategoryLkup").val()

                    if (discrepancyCategoryLkup == enums.DiscripancyCategory.Eligibility) {
                        urlToNavigate = '@Url.Action("EligibilityProcessWork", "Eligibility")' + '?queueId=' + btoa(genQueueId) + "&PageName=" + "EligCreateCase";
                    }
                    else if (discrepancyCategoryLkup == enums.DiscripancyCategory.DOB) {
                        urlToNavigate = '@Url.Action("DOBProcessWork", "Eligibility")' + '?queueId=' + btoa(genQueueId) + "&PageName=" + "EligCreateCase";
                    }
                    else if (discrepancyCategoryLkup == enums.DiscripancyCategory.Gender) {
                        urlToNavigate = '@Url.Action("GenderProcessWork", "Eligibility")' + '?queueId=' + btoa(genQueueId) + "&PageName=" + "EligCreateCase";
                    }
                    if (urlToNavigate != '') {
                        fnLockRecord(urlForLock, genQueueId, enums.ScreenType.Queue, urlToNavigate);
                    }
                    else {
                        MainLayout.fnAlertMessege("Alert!", "An error occoured.");
                    }

                }
            } catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occoured.");
            }

        };
        fnPopulateServiceData = function (id, flag) {
            try {
                $.ajax({
                    data: { "uID": id, "flag": flag },
                    url: urlPersonSearch,
                    type: "POST",
                    success: function (data) {
                        if (typeof data.flag === 'undefined') {
                            $('#divHICNPopup').empty().html(data);
                            $("#HICNPopup").modal('show');
                        }
                        else {
                            if (data == null || data == undefined || data.GPSData == null || data.GPSData.length < 1) {
                                MainLayout.fnResetValidationSummary();
                                $("#frmCreate").deserialize(origForm);
                                if (flag == "MBI") {
                                    MainLayout.fnAlertMessege("Alert!", "Invalid Medicare ID.");
                                }
                                else if (flag == "HHID") {
                                    MainLayout.fnAlertMessege("Alert!", "Invalid GPSHousehold ID.");
                                }
                                else if (flag == "MHHID") {
                                    $("#HICNPopup").modal('hide');
                                    MainLayout.fnAlertMessege("Alert!", "Invalid Medicare ID.");
                                }
                                return false;
                            }
                            fnBindServiceData(data, flag);
                        }
                    }
                });
            } catch (e) {
                MainLayout.fnAlertMessege("Alert!", "An error occurred!");
            }
        }

        //Bind Data
        fnBindServiceData = function (data, flag) {
            try {
                if (data.flag == "Json") {
                    if (data != null && data != undefined && data.GPSData != null && data.GPSData.length > 0) {
                        var data1 = data.GPSData[0];
                        $('#txtMemberID').val((data1.MemberId != null) ? data1.MemberId : "");
                        if (data1.DOB != null && data1.DOB != "") {
                            var value = new Date(parseInt(data1.DOB.substr(6)));
                            var dobDate = new Date(value.getMonth() + 1 + "/" + value.getDate() + "/" + value.getFullYear());
                            $('#MemberDOB_DPart').val(getDateTimeInMMDDYYYY(dobDate));
                        }
                        $('#txtMemberFirstName').val(data1.FirstName);
                        $('#txtMemberLastName').val(data1.LastName);
                        $('#txtMemberMiddleName').val(data1.MiddleName);
                        if (data1.LOB != null) {
                            $("#ddlLOB").val($("#ddlLOB option:contains(" + data1.LOB.trim() + ")").val());
                        }
                        if (flag == "MBI" || flag == "MHHID") {
                            $('#txtGPSHouseholdID').val((data1.HouseholdId != null) ? data1.HouseholdId : "");
                        }
                        else if (flag == "HHID") {
                            $('#txtMemberCurrentHICN').val((data1.HICN != null) ? data1.HICN : "");
                        }
                        if (data1.ContractNumber != null) {
                            if ($("#ddlContractNumber option:contains(" + data1.ContractNumber.trim() + ")").length > 0) {
                                $("#ddlContractNumber").val($("#ddlContractNumber option:contains(" + data1.ContractNumber.trim() + ")").val());
                            }
                        }
                        //$("#ddlContractNumber").change();
                        if (data1.PBP != null) {
                            if ($("#ddlPBP option:contains(" + data1.PBP.trim() + ")").length > 0) {
                                $("#ddlPBP").val($("#ddlPBP option:contains(" + data1.PBP.trim() + ")").val());
                            }
                        }                    
                        if ($("#HICNPopup").length > 0)
                            $("#HICNPopup").modal('hide');
                    }
                }


            } catch (e) {
                throw e;
            }
        };

        // Date Validations.
        function isDatesValid()
        {
            var ComplianceDate = $('#ComplianceStartDate_DPart').val() != "" ? new Date($('#ComplianceStartDate_DPart').val()) : $('#ComplianceStartDate_DPart').val();
            var DiscrepancyReceiptDate = $('#DiscrepancyReceiptDate_DPart').val() != "" ? new Date($('#DiscrepancyReceiptDate_DPart').val()) : $('#DiscrepancyReceiptDate_DPart').val();
            var DiscrepancyStartDate = $('#DiscrepancyStartDate_DPart').val() != "" ? new Date($('#DiscrepancyStartDate_DPart').val()) : $('#DiscrepancyStartDate_DPart').val();
            var DiscrepancyEndDate = $('#DiscrepancyEndDate_DPart').val() != "" ? new Date($('#DiscrepancyEndDate_DPart').val()) : $('#DiscrepancyEndDate_DPart').val();
            var DOB = $('#MemberDOB_DPart').val() != "" ? new Date($('#MemberDOB_DPart').val()) : $('#MemberDOB_DPart').val();
            var PlanEffDate = $('#EligGPSInsuredPlanEffectiveDate_DPart').val() != "" ? new Date($('#EligGPSInsuredPlanEffectiveDate_DPart').val()) : $('#EligGPSInsuredPlanEffectiveDate_DPart').val();
            var PlanTermDate = $('#EligGPSInsuredPlanTermDate_DPart').val() != "" ? new Date($('#EligGPSInsuredPlanTermDate_DPart').val()) : $('#EligGPSInsuredPlanTermDate_DPart').val();
            var MMRStartDate = $('#EligMMRPaymentAdjustmentStartDate_DPart').val() != "" ? new Date($('#EligMMRPaymentAdjustmentStartDate_DPart').val()) : $('#EligMMRPaymentAdjustmentStartDate_DPart').val();
            var MMREndDate = $('#EligMMRPaymentAdjustmentEndDate_DPart').val() != "" ? new Date($('#EligMMRPaymentAdjustmentEndDate_DPart').val()) : $('#EligMMRPaymentAdjustmentEndDate_DPart').val();
            var EligGPSDOB = $('#EligGPSMemberDOB_DPart').val() != "" ? new Date($('#EligGPSMemberDOB_DPart').val()) : $('#EligGPSMemberDOB_DPart').val();
            var EligMMRDOB = $('#EligMMRDOB_DPart').val() != "" ? new Date($('#EligMMRDOB_DPart').val()) : $('#EligMMRDOB_DPart').val();

            var today = new Date();
            var isValid = true;
            var errorList = "";
            var errorRequiredFileds = "";
            today.setHours(0, 0, 0, 0)
            // MemberID,HICN,GPS Household ID Validation
            if ($('#txtMemberCurrentHICN').val() == "") {
                $('#txtMemberCurrentHICN').removeClass("valid").addClass("input-validation-error");//to highlight the field
                errorRequiredFileds = '<li>Medicare ID is Required.</li>';
               // $('#txtMemberID').focus();
                isValid = false;
            }

            //Compliance Start Date Validation
            if (ComplianceDate != "") {
                if (ComplianceDate > today) {
                    $('#ComplianceStartDate_DPart').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>Compliance Start Date Should be  Current Date or Past Date</li>';
                    isValid = false;
                }
            }

            //Discrepancy Receipt Date Validation
            if (DiscrepancyReceiptDate != "") {
                if (DiscrepancyReceiptDate > today) {
                    $('#DiscrepancyReceiptDate_DPart').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>Discrepancy Receipt Date Should be  Current Date or Past Date</li>';
                    isValid = false;
                }
            }

            if ($("#ddlDisType").val() == 7005) // CMS N / Plan Y
            {
                if ($("#ddlEligGPSContractIDLkup").val() == "") {
                    $('#ddlEligGPSContractIDLkup').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>Please Select GPS Contract Number</li>';
                    isValid = false;
                }
                if ($("#ddlEligGPSPBPLkup").val() == "") {
                    $('#ddlEligGPSPBPLkup').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>Please Select GPS PBP</li>';
                    isValid = false;
                }
                if ($("#txtEligGPSCurrentHICN").val() == "") {
                    $('#txtEligGPSCurrentHICN').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>GPS Medicare ID is Required</li>';
                    isValid = false;
                }
            }
           else if ($("#ddlDisType").val() == 7004) // // CMS Y / Plan N
            {
                if ($("#ddlEligMMRContractIDLkup").val() == "") {
                    $('#ddlEligMMRContractIDLkup').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>Please Select MMR Contract Number</li>';
                    isValid = false;
                }
                if ($("#ddlEligMMRPBPLkup").val() == "") {
                    $('#ddlEligMMRPBPLkup').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>Please Select MMR PBP</li>';
                    isValid = false;
                }
                if ($("#txtEligMMRCurrentHICN").val() == "") {
                    $('#txtEligMMRCurrentHICN').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>MMR Medicare ID is Required</li>';
                    isValid = false;
                }
            }
            else {
                if ($("#ddlDisType").val() != "") {
                    if ($("#ddlEligGPSContractIDLkup").val() == "") {
                        $('#ddlEligGPSContractIDLkup').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Please Select GPS Contract Number</li>';
                        isValid = false;
                    }
                    if ($("#ddlEligGPSPBPLkup").val() == "") {
                        $('#ddlEligGPSPBPLkup').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Please Select GPS PBP</li>';
                        isValid = false;
                    }
                    if ($("#txtEligGPSCurrentHICN").val() == "") {
                        $('#txtEligGPSCurrentHICN').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>GPS Medicare ID is Required.</li>';
                        isValid = false;
                    }
                    if ($("#ddlEligMMRContractIDLkup").val() == "") {
                        $('#ddlEligMMRContractIDLkup').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Please Select MMR Contract Number</li>';
                        isValid = false;
                    }
                    if ($("#ddlEligMMRPBPLkup").val() == "") {
                        $('#ddlEligMMRPBPLkup').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Please Select MMR PBP</li>';
                        isValid = false;
                    }
                    if ($("#txtEligMMRCurrentHICN").val() == "") {
                        $('#txtEligMMRCurrentHICN').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>MMR Medicare ID is Required</li>';
                        isValid = false;
                    }
                }

            }
            if ($("#hdnDiscrepancyCategoryLkup").val() == enums.DiscripancyCategory.DOB)
            {
                //Date Of Birth Validation
                if (DOB != "") {
                    if (DOB >= today) {
                        $('#MemberDOB_DPart').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Date Of Birth must be less than Current Date</li>';
                        isValid = false;
                    }
                }
                    else
                    {
                        $('#MemberDOB_DPart').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Date Of Birth is Required</li>';
                        isValid = false;
                    }
            }

            ////Date Of Birth Validation
            if ($("#hdnDiscrepancyCategoryLkup").val() != enums.DiscripancyCategory.DOB) {
                if (DOB != "") {
                    if (DOB >= today) {
                        $('#MemberDOB_DPart').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Date Of Birth must be less than Current Date</li>';
                        isValid = false;
                    }
                }
            }

            if ($("#hdnDiscrepancyCategoryLkup").val() == enums.DiscripancyCategory.Gender) {
                if ($("#ddlGender").val() == "") {
                        $('#ddlGender').removeClass("valid").addClass("input-validation-error");
                        errorList = errorList + '<li>Please Select Gender</li>';
                        isValid = false;
                }
            }

            ////Insured Plan Effective Date validation
            //if (PlanEffDate != "") {
            //    if (PlanEffDate < DOB) {
            //        $('#EligGPSInsuredPlanEffectiveDate_DPart').removeClass("valid").addClass("input-validation-error");
            //        errorList = errorList + '<li>Insured Plan Effective Date should be more than Date Of Birth</li>';
            //        isValid = false;
            //    }
            //}
            //Insured Plan Term Date validation
            //if (PlanEffDate !="")  {
            //    if (PlanEffDate > PlanTermDate) {
            //        $('#EligGPSInsuredPlanTermDate_DPart').removeClass("valid").addClass("input-validation-error");
            //        errorList = errorList + '<li>Insured Plan Term Date should be more than Insured Plan Effective Date</li>';
            //        isValid = false;
            //    }
            //}
            //Payment Adjustment Start Date validation
            //if (MMRStartDate != "") {
            //    if (MMRStartDate < DOB) {
            //        $('#EligMMRPaymentAdjustmentStartDate_DPart').removeClass("valid").addClass("input-validation-error");
            //        errorList = errorList + '<li>Payment Adjustment Start Date should be more than Date Of Birth</li>';
            //        isValid = false;
            //    }
            //}

            //Payment Adjustment End Date validation
            //if (MMRStartDate != "") {
            //    if (MMRStartDate > MMREndDate) {
            //        $('#EligMMRPaymentAdjustmentEndDate_DPart').removeClass("valid").addClass("input-validation-error");
            //        errorList = errorList + '<li>Payment Adjustment End Date should be more than Payment Adjustment Start Date</li>';
            //        isValid = false;
            //    }
            //}

            //GPS Member DOB Validation
            if ($('#EligGPSMemberDOB_DPart').val() != "") {
                if (EligGPSDOB >= today) {
                    $('#EligGPSMemberDOB_DPart').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>GPS Member Date Of Birth must be less than Current Date</li>';
                    isValid = false;
                }
            }

            //MMR Member DOB Validation
            if ($('#EligMMRDOB_DPart').val() != "") {
                if (EligMMRDOB >= today) {
                    $('#EligMMRDOB_DPart').removeClass("valid").addClass("input-validation-error");
                    errorList = errorList + '<li>MMR Member Date Of Birth must be less than Current Date</li>';
                    isValid = false;
                }
            }

            if (!isValid) {
                if ($('.validation-summary-errors').length != 0) {
                    //if validion errors div is present add errors to list
                  //  $('.validation-summary-valid').addClass('validation-summary-errors').removeClass('validation-summary-valid');
                    $('.validation-summary-errors ul').append(errorList);
                    $('.validation-summary-errors ul').prepend(errorRequiredFileds);
                } else {
                    //if validion errors div is not present update validation-summary-valid div and add errors to list
                    $('.validation-summary-valid').addClass('validation-summary-errors').removeClass('validation-summary-valid');
                    $('.validation-summary-errors ul').append(errorList);
                    $('.validation-summary-errors ul').prepend(errorRequiredFileds);
                }
            }
            return isValid;
        }

        $("#ddlContractNumber").on("change", function () {
        try {
            var contID = $("#ddlContractNumber").val();
            var contText = $("#ddlContractNumber option:selected").text();

           // $("#hdnMemberLOBLkup").val("");
            $("#ddlLOB").val("");
            if (contID != "")
            {

                if (contText.charAt(0) == "S") {
                   // CurrentDate.setMonth(CurrentDate.getMonth() + 12);
                    $("#ddlLOB").val(enums.ContractLOB.PDP);
                    $("#hdnMemberLOBLkup").val(enums.ContractLOB.PDP);
                   // $("#txtDisenrollmentDate").val((CurrentDate.getMonth() + 1) + '/' + CurrentDate.getDate() + '/' + CurrentDate.getFullYear());
                }
                else
                {
                   // CurrentDate.setMonth(CurrentDate.getMonth() + 6);
                    $("#ddlLOB").val(enums.ContractLOB.MA);
                    $("#hdnMemberLOBLkup").val(enums.ContractLOB.MA);
                   // $("#txtDisenrollmentDate").val((CurrentDate.getMonth() + 1) + '/' + CurrentDate.getDate() + '/' + CurrentDate.getFullYear());
                }
                ///Load PBP for C&S business segment
                //if (bussinessSegment == enums.BusinessSegmentLkup.CNS) {
                //    MainLayout.fnGetPBP(contID, '#ddlPBP');
                //}
            }

        } catch (e) {

        }
        });

          //$("#ddlEligGPSContractIDLkup").on("change", function () {
          //    try {
          //        var contID = $("#ddlEligGPSContractIDLkup").val();
          //        var contText = $("#ddlEligGPSContractIDLkup option:selected").text();
          //        if (contID != "") {
          //            ///Load PBP for C&S business segment
          //            if (bussinessSegment == enums.BusinessSegmentLkup.CNS) {
          //                MainLayout.fnGetPBP(contID, '#ddlEligGPSPBPLkup');
          //            }
          //        }

          //    } catch (e) {

          //    }
          //});

          //$("#ddlEligMMRContractIDLkup").on("change", function () {
          //    try {
          //        var contID = $("#ddlEligMMRContractIDLkup").val();
          //        var contText = $("#ddlEligMMRContractIDLkup option:selected").text();
          //        if (contID != "") {
          //            ///Load PBP for C&S business segment
          //            if (bussinessSegment == enums.BusinessSegmentLkup.CNS) {
          //                MainLayout.fnGetPBP(contID, '#ddlEligMMRPBPLkup');
          //            }
          //        }

          //    } catch (e) {

          //    }
          //});

           // Discrepancy Type Change Event.
          $("#ddlDisType").on("change", function () {
              try {
                  var DisType = $("#ddlDisType").val();
                  if (DisType == 7005) // CMS N / Plan Y
                  {
                      $("#spanGPSCon").addClass("required");
                      $("#spanGPSPBP").addClass("required");
                      $("#spanGPSHICN").addClass("required");
                      $("#spanMMRCon").removeClass("required");
                      $("#spanMMRPBP").removeClass("required");
                      $("#spanMMRHICN").removeClass("required");
                      $("#ddlEligGPSContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligGPSPBPLkup").removeClass("input-validation-error");
                      $("#txtEligGPSCurrentHICN").removeClass("input-validation-error");
                      $("#ddlEligMMRContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligMMRPBPLkup").removeClass("input-validation-error");
                      $("#txtEligMMRCurrentHICN").removeClass("input-validation-error");

                  }
                  else if (DisType == 7004) // // CMS Y / Plan N
                  {
                      $("#spanMMRCon").addClass("required");
                      $("#spanMMRPBP").addClass("required");
                      $("#spanMMRHICN").addClass("required");
                      $("#spanGPSCon").removeClass("required");
                      $("#spanGPSPBP").removeClass("required");
                      $("#spanGPSHICN").removeClass("required");
                      $("#ddlEligMMRContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligMMRPBPLkup").removeClass("input-validation-error");
                      $("#txtEligMMRCurrentHICN").removeClass("input-validation-error");
                      $("#ddlEligGPSContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligGPSPBPLkup").removeClass("input-validation-error");
                      $("#txtEligGPSCurrentHICN").removeClass("input-validation-error");
                  }
                  else if(DisType == 7006 || DisType == 7007){
                      $("#spanGPSCon").addClass("required");
                      $("#spanGPSPBP").addClass("required");
                      $("#spanGPSHICN").addClass("required");
                      $("#spanMMRCon").addClass("required");
                      $("#spanMMRPBP").addClass("required");
                      $("#spanMMRHICN").addClass("required");
                      $("#ddlEligGPSContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligGPSPBPLkup").removeClass("input-validation-error");
                      $("#txtEligGPSCurrentHICN").removeClass("input-validation-error");
                      $("#ddlEligMMRContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligMMRPBPLkup").removeClass("input-validation-error");
                      $("#txtEligMMRCurrentHICN").removeClass("input-validation-error");

                  }
                  else {
                      $("#spanGPSCon").removeClass("required");
                      $("#spanGPSPBP").removeClass("required");
                      $("#spanGPSHICN").removeClass("required");
                      $("#spanMMRCon").removeClass("required");
                      $("#spanMMRPBP").removeClass("required");
                      $("#spanMMRHICN").removeClass("required");
                      $("#ddlEligGPSContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligGPSPBPLkup").removeClass("input-validation-error");
                      $("#txtEligGPSCurrentHICN").removeClass("input-validation-error");
                      $("#ddlEligMMRContractIDLkup").removeClass("input-validation-error");
                      $("#ddlEligMMRPBPLkup").removeClass("input-validation-error");
                      $("#txtEligMMRCurrentHICN").removeClass("input-validation-error");
                  }

              } catch (e) {

              }
          });

        //Reset Button Click Event
        $('#btnReset').click(function () {
            MainLayout.fnResetValidationSummary();
            $("#frmCreate").deserialize(origForm);
        });

        //Cancel Button Click Event
        $('#btnCancel').click(function () {
            if($("#hdnIsClosedAndCreateNew").val()=="True")
            {
               fnUnlockRecord(unlockUrl, '@Model.GEN_QueueId', enums.ScreenType.Queue, searchCancelURL);
            }
            else
            {
                 window.location.href = '@Url.Action("Home", "Home")';
            }

        });

        // $('#txtMemberCurrentHICN,#txtEligGPSCurrentHICN,#txtEligMMRCurrentHICN').keyup(function () {
        //this.value = this.value.toUpperCase();
        //});
       $(function () {
            $('#frmCreate').get(0).reset();
           var a = ('@Model.DiscrepancyCategoryLkup')
           {
                if (a == 6004) {
                    $("#spanDOB").hide();
                    $("#spanGender").hide();
                }
                else if(a == 6005)
                {
                    $("#spanDOB").show();
                    $("#spanGender").hide();
                }
                else
                {
                    $("#spanDOB").hide();
                    $("#spanGender").show();
                }

          }

           if ('@Model.MemberDOB' != null && '@Model.MemberDOB' != '') {
             $('#MemberDOB_DPart').val(getDateTimeInMMDDYYYY('@Model.MemberDOB'));
            //fnSetDateToField('','MemberDOB');
        }
           if ('@Model.ComplianceStartDate' != null && '@Model.ComplianceStartDate' != '') {
               $('#ComplianceStartDate_DPart').val(getDateTimeInMMDDYYYY('@Model.ComplianceStartDate'));
            //fnSetDateToField('','ComplianceStartDate');
        }
           if ('@Model.DiscrepancyReceiptDate' != null && '@Model.DiscrepancyReceiptDate' != '') {
               $('#DiscrepancyReceiptDate_DPart').val(getDateTimeInMMDDYYYY('@Model.DiscrepancyReceiptDate'));
            //fnSetDateToField('','DiscrepancyReceiptDate');
        }
        if ('@Model.EligGPSInsuredPlanEffectiveDate' != null && '@Model.EligGPSInsuredPlanEffectiveDate' != '') {
           // fnSetDateToField('','EligGPSInsuredPlanEffectiveDate');
            $('#EligGPSInsuredPlanEffectiveDate_DPart').val(getDateTimeInMMDDYYYY('@Model.EligGPSInsuredPlanEffectiveDate'));
        }
        if ('@Model.EligGPSInsuredPlanTermDate' != null && '@Model.EligGPSInsuredPlanTermDate' != '') {
            $('#EligGPSInsuredPlanTermDate_DPart').val(getDateTimeInMMDDYYYY('@Model.EligGPSInsuredPlanTermDate'));
            //fnSetDateToField('','EligGPSInsuredPlanTermDate');
        }
        if ('@Model.EligGPSMemberDOB' != null && '@Model.EligGPSMemberDOB' != '') {
            $('#EligGPSMemberDOB_DPart').val(getDateTimeInMMDDYYYY('@Model.EligGPSMemberDOB'));
            //fnSetDateToField('','EligGPSMemberDOB');
        }
        if ('@Model.EligMMRPaymentAdjustmentStartDate' != null && '@Model.EligMMRPaymentAdjustmentStartDate' != '') {
            $('#EligMMRPaymentAdjustmentStartDate_DPart').val(getDateTimeInMMDDYYYY('@Model.EligMMRPaymentAdjustmentStartDate'));
            //fnSetDateToField('','EligMMRPaymentAdjustmentStartDate');
        }
        if ('@Model.EligMMRPaymentAdjustmentEndDate' != null && '@Model.EligMMRPaymentAdjustmentEndDate' != '') {
            $('#EligMMRPaymentAdjustmentEndDate_DPart').val(getDateTimeInMMDDYYYY('@Model.EligMMRPaymentAdjustmentEndDate'));
           // fnSetDateToField('','EligMMRPaymentAdjustmentEndDate');
        }
        if ('@Model.EligMMRDOB' != null && '@Model.EligMMRDOB' != '') {
            $('#EligMMRDOB_DPart').val(getDateTimeInMMDDYYYY('@Model.EligMMRDOB'));
            //fnSetDateToField('','EligMMRDOB');
        }
        $("#ddlContractNumber").change();  
        //$("#ddlEligGPSContractIDLkup").change();  
        //$("#ddlEligMMRContractIDLkup").change();  
        $("#ddlDisType").change();
           if('@Model.MemberPBP'!=""){
               if ($("#ddlPBP option:contains(" + '@Model.MemberPBP' + ")").length > 0) {
                   $("#ddlPBP").val($("#ddlPBP option:contains(" + @Model.MemberPBP + ")").val());
               }
        }
        $myForm=$("#frmCreate");
        origForm = $myForm.serialize();
        $('#txtMemberID').focus();

        });

    </script>
}
